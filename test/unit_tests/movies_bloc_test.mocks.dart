// Mocks generated by Mockito 5.4.2 from annotations
// in movie_db/test/unit_tests/movies_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_db/data/model/data_state.dart' as _i4;
import 'package:movie_db/domain/entity/movie.dart' as _i7;
import 'package:movie_db/domain/repository/movie_database_repository_interface.dart'
    as _i3;
import 'package:movie_db/domain/repository/movie_repository_interface.dart'
    as _i2;
import 'package:movie_db/domain/usecase/implementation/get_movies_usecase.dart'
    as _i5;
import 'package:movie_db/domain/usecase/implementation/get_upcoming_movies_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIMovieRepository_0 extends _i1.SmartFake
    implements _i2.IMovieRepository {
  _FakeIMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIMovieDatabaseRepository_1 extends _i1.SmartFake
    implements _i3.IMovieDatabaseRepository {
  _FakeIMovieDatabaseRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataState_2<T> extends _i1.SmartFake implements _i4.DataState<T> {
  _FakeDataState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPopularMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMoviesUseCase extends _i1.Mock
    implements _i5.GetMoviesUseCase {
  MockGetPopularMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IMovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeIMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.IMovieRepository);
  @override
  _i3.IMovieDatabaseRepository get movieDataBaseRepository =>
      (super.noSuchMethod(
        Invocation.getter(#movieDataBaseRepository),
        returnValue: _FakeIMovieDatabaseRepository_1(
          this,
          Invocation.getter(#movieDataBaseRepository),
        ),
      ) as _i3.IMovieDatabaseRepository);
  @override
  _i6.Future<_i4.DataState<List<_i7.Movie>>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i6.Future<_i4.DataState<List<_i7.Movie>>>.value(
            _FakeDataState_2<List<_i7.Movie>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6.Future<_i4.DataState<List<_i7.Movie>>>);
}

/// A class which mocks [GetUpcomingMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUpcomingMoviesUseCase extends _i1.Mock
    implements _i8.GetUpcomingMoviesUseCase {
  MockGetUpcomingMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IMovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeIMovieRepository_0(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i2.IMovieRepository);
  @override
  _i3.IMovieDatabaseRepository get movieDataBaseRepository =>
      (super.noSuchMethod(
        Invocation.getter(#movieDataBaseRepository),
        returnValue: _FakeIMovieDatabaseRepository_1(
          this,
          Invocation.getter(#movieDataBaseRepository),
        ),
      ) as _i3.IMovieDatabaseRepository);
  @override
  _i6.Future<_i4.DataState<List<_i7.Movie>>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i6.Future<_i4.DataState<List<_i7.Movie>>>.value(
            _FakeDataState_2<List<_i7.Movie>>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i6.Future<_i4.DataState<List<_i7.Movie>>>);
}
