// Mocks generated by Mockito 5.4.2 from annotations
// in movie_db/test/widget_tests/popular_movies_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_db/core/util/enums/endpoint.dart' as _i9;
import 'package:movie_db/domain/entity/movie_state.dart' as _i6;
import 'package:movie_db/domain/usecase/implementation/get_now_playing_movies_usecase.dart'
    as _i3;
import 'package:movie_db/domain/usecase/implementation/get_popular_movies_usecase.dart'
    as _i2;
import 'package:movie_db/domain/usecase/implementation/get_top_rated_movies_usecase.dart'
    as _i4;
import 'package:movie_db/domain/usecase/implementation/get_upcoming_movies_usecase.dart'
    as _i5;
import 'package:movie_db/presentation/bloc/movies_bloc.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPopularMoviesUseCase_0 extends _i1.SmartFake
    implements _i2.GetPopularMoviesUseCase {
  _FakeGetPopularMoviesUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNowPlayingMoviesUseCase_1 extends _i1.SmartFake
    implements _i3.GetNowPlayingMoviesUseCase {
  _FakeGetNowPlayingMoviesUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedMoviesUseCase_2 extends _i1.SmartFake
    implements _i4.GetTopRatedMoviesUseCase {
  _FakeGetTopRatedMoviesUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUpcomingMoviesUseCase_3 extends _i1.SmartFake
    implements _i5.GetUpcomingMoviesUseCase {
  _FakeGetUpcomingMoviesUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieState_4 extends _i1.SmartFake implements _i6.MovieState {
  _FakeMovieState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesBloc extends _i1.Mock implements _i7.MoviesBloc {
  MockMoviesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetPopularMoviesUseCase get popularUsecase => (super.noSuchMethod(
        Invocation.getter(#popularUsecase),
        returnValue: _FakeGetPopularMoviesUseCase_0(
          this,
          Invocation.getter(#popularUsecase),
        ),
      ) as _i2.GetPopularMoviesUseCase);
  @override
  _i3.GetNowPlayingMoviesUseCase get nowPlayingUsecase => (super.noSuchMethod(
        Invocation.getter(#nowPlayingUsecase),
        returnValue: _FakeGetNowPlayingMoviesUseCase_1(
          this,
          Invocation.getter(#nowPlayingUsecase),
        ),
      ) as _i3.GetNowPlayingMoviesUseCase);
  @override
  _i4.GetTopRatedMoviesUseCase get topRatedUsecase => (super.noSuchMethod(
        Invocation.getter(#topRatedUsecase),
        returnValue: _FakeGetTopRatedMoviesUseCase_2(
          this,
          Invocation.getter(#topRatedUsecase),
        ),
      ) as _i4.GetTopRatedMoviesUseCase);
  @override
  _i5.GetUpcomingMoviesUseCase get upcomingUsecase => (super.noSuchMethod(
        Invocation.getter(#upcomingUsecase),
        returnValue: _FakeGetUpcomingMoviesUseCase_3(
          this,
          Invocation.getter(#upcomingUsecase),
        ),
      ) as _i5.GetUpcomingMoviesUseCase);
  @override
  _i8.Stream<_i6.MovieState> get movies => (super.noSuchMethod(
        Invocation.getter(#movies),
        returnValue: _i8.Stream<_i6.MovieState>.empty(),
      ) as _i8.Stream<_i6.MovieState>);
  @override
  _i6.MovieState get initialData => (super.noSuchMethod(
        Invocation.getter(#initialData),
        returnValue: _FakeMovieState_4(
          this,
          Invocation.getter(#initialData),
        ),
      ) as _i6.MovieState);
  @override
  void getMovies(_i9.Endpoint? endpoint) => super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [endpoint],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
